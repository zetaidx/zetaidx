// Generated by @wagmi/cli@0.1.15 on 4/2/2025 at 4:34:40 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ZetaIdxUniversalToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const zetaIdxUniversalTokenABI = [
  { type: 'error', inputs: [], name: 'AdditionsOverflow' },
  {
    type: 'error',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'AddressEmptyCode',
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  { type: 'error', inputs: [], name: 'ApproveFailed' },
  { type: 'error', inputs: [], name: 'CantBeIdenticalAddresses' },
  { type: 'error', inputs: [], name: 'CantBeZeroAddress' },
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ERC1967InvalidImplementation',
  },
  { type: 'error', inputs: [], name: 'ERC1967NonPayable' },
  {
    type: 'error',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'allowance', internalType: 'uint256', type: 'uint256' },
      { name: 'needed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC20InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'balance', internalType: 'uint256', type: 'uint256' },
      { name: 'needed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC20InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [{ name: 'approver', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidApprover',
  },
  {
    type: 'error',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidReceiver',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidSender',
  },
  {
    type: 'error',
    inputs: [{ name: 'spender', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidSpender',
  },
  { type: 'error', inputs: [], name: 'EnforcedPause' },
  { type: 'error', inputs: [], name: 'ExpectedPause' },
  { type: 'error', inputs: [], name: 'FailedCall' },
  { type: 'error', inputs: [], name: 'IdenticalAddresses' },
  { type: 'error', inputs: [], name: 'InsufficientInputAmount' },
  { type: 'error', inputs: [], name: 'InsufficientLiquidity' },
  { type: 'error', inputs: [], name: 'InvalidAddress' },
  { type: 'error', inputs: [], name: 'InvalidGasLimit' },
  { type: 'error', inputs: [], name: 'InvalidInitialization' },
  { type: 'error', inputs: [], name: 'InvalidInput' },
  { type: 'error', inputs: [], name: 'InvalidPath' },
  { type: 'error', inputs: [], name: 'InvalidPathLength' },
  { type: 'error', inputs: [], name: 'InvalidRatio' },
  { type: 'error', inputs: [], name: 'MultiplicationsOverflow' },
  { type: 'error', inputs: [], name: 'NotInitialized' },
  { type: 'error', inputs: [], name: 'NotInitializing' },
  {
    type: 'error',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'OwnableInvalidOwner',
  },
  {
    type: 'error',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'OwnableUnauthorizedAccount',
  },
  { type: 'error', inputs: [], name: 'TransferFailed' },
  { type: 'error', inputs: [], name: 'UUPSUnauthorizedCallContext' },
  {
    type: 'error',
    inputs: [{ name: 'slot', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UUPSUnsupportedProxiableUUID',
  },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  { type: 'error', inputs: [], name: 'ZeroMsgValue' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'version',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'zrc20',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetConnected',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'universalAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SetUniversal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokenMinted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'destination',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'receiver',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokenTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receiver',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokenTransferReceived',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokenTransferReverted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'destination',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokenTransferToDestination',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Unwrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Wrapped',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'TOTAL_RATIO',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_INTERFACE_VERSION',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'basket',
    outputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'basketLength',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'connected',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gasLimitAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gateway',
    outputs: [
      { name: '', internalType: 'contract GatewayZEVM', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getIndexComposition',
    outputs: [
      { name: 'tokens', internalType: 'address[]', type: 'address[]' },
      { name: 'ratios', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'getTokenInfo',
    outputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'indexInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initialOwner', internalType: 'address', type: 'address' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      {
        name: 'gatewayAddress',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'gas', internalType: 'uint256', type: 'uint256' },
      {
        name: 'uniswapRouterAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokens', internalType: 'address[]', type: 'address[]' },
      { name: 'ratios', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'initializeIndex',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isUniversal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'context',
        internalType: 'struct MessageContext',
        type: 'tuple',
        components: [
          { name: 'origin', internalType: 'bytes', type: 'bytes' },
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'chainID', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'zrc20', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'message', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'context',
        internalType: 'struct RevertContext',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'asset', internalType: 'address', type: 'address' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'revertMessage', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'onRevert',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'zrc20', internalType: 'address', type: 'address' },
      { name: 'contractAddress', internalType: 'address', type: 'address' },
    ],
    name: 'setConnected',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'gas', internalType: 'uint256', type: 'uint256' }],
    name: 'setGasLimit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gatewayAddress', internalType: 'address', type: 'address' },
    ],
    name: 'setGateway',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'destination', internalType: 'address', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'uniswapRouter',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'unwrap',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'wrap',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__.
 */
export function useZetaIdxUniversalToken(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: zetaIdxUniversalTokenABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__.
 */
export function useZetaIdxUniversalTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"TOTAL_RATIO"`.
 */
export function useZetaIdxUniversalTokenTotalRatio<
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    'TOTAL_RATIO'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'TOTAL_RATIO',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'TOTAL_RATIO',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'TOTAL_RATIO',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"UPGRADE_INTERFACE_VERSION"`.
 */
export function useZetaIdxUniversalTokenUpgradeInterfaceVersion<
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    'UPGRADE_INTERFACE_VERSION'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'UPGRADE_INTERFACE_VERSION',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'UPGRADE_INTERFACE_VERSION',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'UPGRADE_INTERFACE_VERSION',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useZetaIdxUniversalTokenAllowance<
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    'allowance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'allowance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useZetaIdxUniversalTokenBalanceOf<
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    'balanceOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"basket"`.
 */
export function useZetaIdxUniversalTokenBasket<
  TSelectData = ReadContractResult<typeof zetaIdxUniversalTokenABI, 'basket'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'basket',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'basket',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'basket',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"basketLength"`.
 */
export function useZetaIdxUniversalTokenBasketLength<
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    'basketLength'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'basketLength',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'basketLength',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'basketLength',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"connected"`.
 */
export function useZetaIdxUniversalTokenConnected<
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    'connected'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'connected',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'connected',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'connected',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useZetaIdxUniversalTokenDecimals<
  TSelectData = ReadContractResult<typeof zetaIdxUniversalTokenABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'decimals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"gasLimitAmount"`.
 */
export function useZetaIdxUniversalTokenGasLimitAmount<
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    'gasLimitAmount'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'gasLimitAmount',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'gasLimitAmount',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'gasLimitAmount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"gateway"`.
 */
export function useZetaIdxUniversalTokenGateway<
  TSelectData = ReadContractResult<typeof zetaIdxUniversalTokenABI, 'gateway'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'gateway',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'gateway',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'gateway',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"getIndexComposition"`.
 */
export function useZetaIdxUniversalTokenGetIndexComposition<
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    'getIndexComposition'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'getIndexComposition',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'getIndexComposition',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'getIndexComposition',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"getTokenInfo"`.
 */
export function useZetaIdxUniversalTokenGetTokenInfo<
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    'getTokenInfo'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'getTokenInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'getTokenInfo',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'getTokenInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"indexInitialized"`.
 */
export function useZetaIdxUniversalTokenIndexInitialized<
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    'indexInitialized'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'indexInitialized',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'indexInitialized',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'indexInitialized',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"isUniversal"`.
 */
export function useZetaIdxUniversalTokenIsUniversal<
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    'isUniversal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'isUniversal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'isUniversal',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'isUniversal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"name"`.
 */
export function useZetaIdxUniversalTokenName<
  TSelectData = ReadContractResult<typeof zetaIdxUniversalTokenABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof zetaIdxUniversalTokenABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"owner"`.
 */
export function useZetaIdxUniversalTokenOwner<
  TSelectData = ReadContractResult<typeof zetaIdxUniversalTokenABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'owner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"paused"`.
 */
export function useZetaIdxUniversalTokenPaused<
  TSelectData = ReadContractResult<typeof zetaIdxUniversalTokenABI, 'paused'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'paused',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'paused',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useZetaIdxUniversalTokenProxiableUuid<
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    'proxiableUUID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'proxiableUUID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'proxiableUUID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useZetaIdxUniversalTokenSymbol<
  TSelectData = ReadContractResult<typeof zetaIdxUniversalTokenABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'symbol',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useZetaIdxUniversalTokenTotalSupply<
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    'totalSupply'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"uniswapRouter"`.
 */
export function useZetaIdxUniversalTokenUniswapRouter<
  TSelectData = ReadContractResult<
    typeof zetaIdxUniversalTokenABI,
    'uniswapRouter'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof zetaIdxUniversalTokenABI,
      'uniswapRouter',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'uniswapRouter',
    ...config,
  } as UseContractReadConfig<
    typeof zetaIdxUniversalTokenABI,
    'uniswapRouter',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__.
 */
export function useZetaIdxUniversalTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof zetaIdxUniversalTokenABI,
    TFunctionName
  >({ abi: zetaIdxUniversalTokenABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useZetaIdxUniversalTokenApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'approve'
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof zetaIdxUniversalTokenABI, 'approve'>({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useZetaIdxUniversalTokenBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'burn'
        >['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof zetaIdxUniversalTokenABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof zetaIdxUniversalTokenABI, 'burn'>({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useZetaIdxUniversalTokenBurnFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'burnFrom'
        >['abi'],
        'burnFrom'
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'burnFrom'
      > & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof zetaIdxUniversalTokenABI, 'burnFrom'>({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'burnFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useZetaIdxUniversalTokenInitialize<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'initialize'
        >['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'initialize'
      > & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof zetaIdxUniversalTokenABI, 'initialize'>(
    {
      abi: zetaIdxUniversalTokenABI,
      functionName: 'initialize',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"initializeIndex"`.
 */
export function useZetaIdxUniversalTokenInitializeIndex<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'initializeIndex'
        >['abi'],
        'initializeIndex'
      > & { functionName?: 'initializeIndex' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'initializeIndex'
      > & {
        abi?: never
        functionName?: 'initializeIndex'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof zetaIdxUniversalTokenABI,
    'initializeIndex'
  >({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'initializeIndex',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useZetaIdxUniversalTokenMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'mint'
        >['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof zetaIdxUniversalTokenABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof zetaIdxUniversalTokenABI, 'mint'>({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"onCall"`.
 */
export function useZetaIdxUniversalTokenOnCall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'onCall'
        >['abi'],
        'onCall'
      > & { functionName?: 'onCall' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'onCall'
      > & {
        abi?: never
        functionName?: 'onCall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof zetaIdxUniversalTokenABI, 'onCall'>({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'onCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"onRevert"`.
 */
export function useZetaIdxUniversalTokenOnRevert<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'onRevert'
        >['abi'],
        'onRevert'
      > & { functionName?: 'onRevert' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'onRevert'
      > & {
        abi?: never
        functionName?: 'onRevert'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof zetaIdxUniversalTokenABI, 'onRevert'>({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'onRevert',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"pause"`.
 */
export function useZetaIdxUniversalTokenPause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'pause'
        >['abi'],
        'pause'
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'pause'
      > & {
        abi?: never
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof zetaIdxUniversalTokenABI, 'pause'>({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useZetaIdxUniversalTokenRenounceOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof zetaIdxUniversalTokenABI,
    'renounceOwnership'
  >({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"setConnected"`.
 */
export function useZetaIdxUniversalTokenSetConnected<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'setConnected'
        >['abi'],
        'setConnected'
      > & { functionName?: 'setConnected' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'setConnected'
      > & {
        abi?: never
        functionName?: 'setConnected'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof zetaIdxUniversalTokenABI,
    'setConnected'
  >({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'setConnected',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"setGasLimit"`.
 */
export function useZetaIdxUniversalTokenSetGasLimit<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'setGasLimit'
        >['abi'],
        'setGasLimit'
      > & { functionName?: 'setGasLimit' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'setGasLimit'
      > & {
        abi?: never
        functionName?: 'setGasLimit'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof zetaIdxUniversalTokenABI,
    'setGasLimit'
  >({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'setGasLimit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"setGateway"`.
 */
export function useZetaIdxUniversalTokenSetGateway<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'setGateway'
        >['abi'],
        'setGateway'
      > & { functionName?: 'setGateway' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'setGateway'
      > & {
        abi?: never
        functionName?: 'setGateway'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof zetaIdxUniversalTokenABI, 'setGateway'>(
    {
      abi: zetaIdxUniversalTokenABI,
      functionName: 'setGateway',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useZetaIdxUniversalTokenTransfer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'transfer'
        >['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'transfer'
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof zetaIdxUniversalTokenABI, 'transfer'>({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"transferCrossChain"`.
 */
export function useZetaIdxUniversalTokenTransferCrossChain<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'transferCrossChain'
        >['abi'],
        'transferCrossChain'
      > & { functionName?: 'transferCrossChain' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'transferCrossChain'
      > & {
        abi?: never
        functionName?: 'transferCrossChain'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof zetaIdxUniversalTokenABI,
    'transferCrossChain'
  >({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'transferCrossChain',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useZetaIdxUniversalTokenTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof zetaIdxUniversalTokenABI,
    'transferFrom'
  >({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useZetaIdxUniversalTokenTransferOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof zetaIdxUniversalTokenABI,
    'transferOwnership'
  >({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"unpause"`.
 */
export function useZetaIdxUniversalTokenUnpause<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'unpause'
        >['abi'],
        'unpause'
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'unpause'
      > & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof zetaIdxUniversalTokenABI, 'unpause'>({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"unwrap"`.
 */
export function useZetaIdxUniversalTokenUnwrap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'unwrap'
        >['abi'],
        'unwrap'
      > & { functionName?: 'unwrap' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'unwrap'
      > & {
        abi?: never
        functionName?: 'unwrap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof zetaIdxUniversalTokenABI, 'unwrap'>({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'unwrap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useZetaIdxUniversalTokenUpgradeToAndCall<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'upgradeToAndCall'
        >['abi'],
        'upgradeToAndCall'
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        TMode,
        typeof zetaIdxUniversalTokenABI,
        'upgradeToAndCall'
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof zetaIdxUniversalTokenABI,
    'upgradeToAndCall'
  >({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"wrap"`.
 */
export function useZetaIdxUniversalTokenWrap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof zetaIdxUniversalTokenABI,
          'wrap'
        >['abi'],
        'wrap'
      > & { functionName?: 'wrap' }
    : UseContractWriteConfig<TMode, typeof zetaIdxUniversalTokenABI, 'wrap'> & {
        abi?: never
        functionName?: 'wrap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof zetaIdxUniversalTokenABI, 'wrap'>({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'wrap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__.
 */
export function usePrepareZetaIdxUniversalTokenWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zetaIdxUniversalTokenABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareZetaIdxUniversalTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareZetaIdxUniversalTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareZetaIdxUniversalTokenBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'burnFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'burnFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'burnFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareZetaIdxUniversalTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zetaIdxUniversalTokenABI,
      'initialize'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"initializeIndex"`.
 */
export function usePrepareZetaIdxUniversalTokenInitializeIndex(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zetaIdxUniversalTokenABI,
      'initializeIndex'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'initializeIndex',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'initializeIndex'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareZetaIdxUniversalTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"onCall"`.
 */
export function usePrepareZetaIdxUniversalTokenOnCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'onCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'onCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'onCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"onRevert"`.
 */
export function usePrepareZetaIdxUniversalTokenOnRevert(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'onRevert'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'onRevert',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'onRevert'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareZetaIdxUniversalTokenPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareZetaIdxUniversalTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zetaIdxUniversalTokenABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"setConnected"`.
 */
export function usePrepareZetaIdxUniversalTokenSetConnected(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zetaIdxUniversalTokenABI,
      'setConnected'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'setConnected',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'setConnected'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"setGasLimit"`.
 */
export function usePrepareZetaIdxUniversalTokenSetGasLimit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zetaIdxUniversalTokenABI,
      'setGasLimit'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'setGasLimit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'setGasLimit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"setGateway"`.
 */
export function usePrepareZetaIdxUniversalTokenSetGateway(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zetaIdxUniversalTokenABI,
      'setGateway'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'setGateway',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'setGateway'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareZetaIdxUniversalTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"transferCrossChain"`.
 */
export function usePrepareZetaIdxUniversalTokenTransferCrossChain(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zetaIdxUniversalTokenABI,
      'transferCrossChain'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'transferCrossChain',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'transferCrossChain'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareZetaIdxUniversalTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zetaIdxUniversalTokenABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareZetaIdxUniversalTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zetaIdxUniversalTokenABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareZetaIdxUniversalTokenUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'unpause'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"unwrap"`.
 */
export function usePrepareZetaIdxUniversalTokenUnwrap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'unwrap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'unwrap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'unwrap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareZetaIdxUniversalTokenUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zetaIdxUniversalTokenABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zetaIdxUniversalTokenABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `functionName` set to `"wrap"`.
 */
export function usePrepareZetaIdxUniversalTokenWrap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'wrap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zetaIdxUniversalTokenABI,
    functionName: 'wrap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zetaIdxUniversalTokenABI, 'wrap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__.
 */
export function useZetaIdxUniversalTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof zetaIdxUniversalTokenABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    ...config,
  } as UseContractEventConfig<typeof zetaIdxUniversalTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useZetaIdxUniversalTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useZetaIdxUniversalTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useZetaIdxUniversalTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof zetaIdxUniversalTokenABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof zetaIdxUniversalTokenABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"Paused"`.
 */
export function useZetaIdxUniversalTokenPausedEvent(
  config: Omit<
    UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"SetConnected"`.
 */
export function useZetaIdxUniversalTokenSetConnectedEvent(
  config: Omit<
    UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'SetConnected'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'SetConnected',
    ...config,
  } as UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'SetConnected'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"SetUniversal"`.
 */
export function useZetaIdxUniversalTokenSetUniversalEvent(
  config: Omit<
    UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'SetUniversal'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'SetUniversal',
    ...config,
  } as UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'SetUniversal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"TokenMinted"`.
 */
export function useZetaIdxUniversalTokenTokenMintedEvent(
  config: Omit<
    UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'TokenMinted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'TokenMinted',
    ...config,
  } as UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'TokenMinted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"TokenTransfer"`.
 */
export function useZetaIdxUniversalTokenTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'TokenTransfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'TokenTransfer',
    ...config,
  } as UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'TokenTransfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"TokenTransferReceived"`.
 */
export function useZetaIdxUniversalTokenTokenTransferReceivedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof zetaIdxUniversalTokenABI,
      'TokenTransferReceived'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'TokenTransferReceived',
    ...config,
  } as UseContractEventConfig<
    typeof zetaIdxUniversalTokenABI,
    'TokenTransferReceived'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"TokenTransferReverted"`.
 */
export function useZetaIdxUniversalTokenTokenTransferRevertedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof zetaIdxUniversalTokenABI,
      'TokenTransferReverted'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'TokenTransferReverted',
    ...config,
  } as UseContractEventConfig<
    typeof zetaIdxUniversalTokenABI,
    'TokenTransferReverted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"TokenTransferToDestination"`.
 */
export function useZetaIdxUniversalTokenTokenTransferToDestinationEvent(
  config: Omit<
    UseContractEventConfig<
      typeof zetaIdxUniversalTokenABI,
      'TokenTransferToDestination'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'TokenTransferToDestination',
    ...config,
  } as UseContractEventConfig<
    typeof zetaIdxUniversalTokenABI,
    'TokenTransferToDestination'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useZetaIdxUniversalTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useZetaIdxUniversalTokenUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"Unwrapped"`.
 */
export function useZetaIdxUniversalTokenUnwrappedEvent(
  config: Omit<
    UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Unwrapped'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'Unwrapped',
    ...config,
  } as UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Unwrapped'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useZetaIdxUniversalTokenUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zetaIdxUniversalTokenABI}__ and `eventName` set to `"Wrapped"`.
 */
export function useZetaIdxUniversalTokenWrappedEvent(
  config: Omit<
    UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Wrapped'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zetaIdxUniversalTokenABI,
    eventName: 'Wrapped',
    ...config,
  } as UseContractEventConfig<typeof zetaIdxUniversalTokenABI, 'Wrapped'>)
}
